1  math.js will already do the job for you – if you let it
mathjs can recognise 2x, 3π, 4(1 + y), 5i, etc. out of the box.
All you have to do is turn the feature on:

ts
Copy
Edit
const mathInstance = math.create(math.all);
mathInstance.config({
  number:    'number',
  precision: 14,
  implicit:  'show'   // ← this is the switch
});
Once implicit:"show" is set you can delete all the regex that tries to force‑insert *, because the parser now does it for free and far more safely.

2  Those regexes are actually blocking unit expressions
The pattern

ts
Copy
Edit
processedExpr = processedExpr.replace(/(\d+)([a-zA-Z])/g, '$1*$2');
fires on 5km and turns it into 5*km, so the unit is lost and handleUnitConversion never gets a chance to run.
Exactly the same thing happens to 10lbs, 3gal, … so every “implicit‑mul” fix you made is also breaking every unit expression.

If you really want to keep a pre‑processor, you need to treat numbers followed by known units differently:

ts
Copy
Edit
const unitNames = Object.keys(unitMap).join('|');      // in, ft, km, …
processedExpr = processedExpr.replace(
  new RegExp('(\\d+(?:\\.\\d+)?)([a-zA-Z]+)', 'g'),
  (_, num, letters) => unitMap[letters.toLowerCase()]
      ? `${num} ${letters}`   // number‑unit → add a space
      : `${num}*${letters}`   // number‑variable → insert *
);
…but turning on implicit:"show" makes all that unnecessary.

3  After the switch, your whole pipeline gets simpler
ts
Copy
Edit
function evaluate(expression: string,
                  variables: Record<string, any> = {},
                  angleMode: 'DEG' | 'RAD' = 'DEG') {

  // 1. Strip comments
  const expr = expression.split('//')[0].trim();
  if (!expr) return { result: null, updatedVariables: {} };

  // 2. Variable assignment?
  const assign = expr.match(/^\s*([a-zA-Z_]\w*)\s*=\s*(.+)$/);
  if (assign) {
    const [, name, rhs] = assign;
    const value = mathInstance.evaluate(rhs, variables);
    return { result: value, updatedVariables: { [name]: value } };
  }

  // 3. Unit conversion (only works if there’s a space after the number)
  if (expr.toLowerCase().includes(' to ')) {
    const result = mathInstance.evaluate(expr, variables);
    return { result: result.toString(), updatedVariables: {} };
  }

  // 4. Plain evaluation – implicit multiplication now “just works”
  const result = mathInstance.evaluate(expr, variables);
  return { result, updatedVariables: {} };
}
4  Quick smoke‑tests (with implicit:"show")
Input	Variables	Expected
2x	{x:4}	8
2(x+1)	{x:3}	8
3sin(30)	–	1.5 (DEG mode)
5km to mi	–	3.10686 mi
3+4i	–	3 + 4i
