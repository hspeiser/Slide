Okay, this is a complex setup designed to tackle macOS compatibility issues, but the errors indicate a fundamental problem during Electron's internal process initialization, specifically with Mach ports used for inter-process communication (IPC) on macOS.
Let's break down the errors and the setup:
Error Analysis:
ERROR:mach_port_rendezvous.cc(317)] bootstrap_look_up com.github.Electron.MachPortRendezvousServer.1: Unknown service name (1102): Electron's helper processes (like the renderer or GPU process) are trying to connect to a specific Mach port service expected to be running (likely registered by the main process). The bootstrap_look_up fails because the OS can't find that service name. This means the main process either didn't register it correctly, it crashed before registration, or something is blocking the lookup.
ERROR:field_trial.cc(1080)] Mach rendezvous failed, terminating process (parent died?): Because the essential Mach port communication failed, the helper process assumes the main process is gone or unreachable and terminates itself. field_trial.cc suggests this might be happening during the setup of Chromium's experimental feature flags (Field Trials), which requires cross-process communication.
Electron process exited with code 0: This is slightly odd given the errors. It suggests the main process might have exited cleanly, perhaps because it finished its initial synchronous tasks, even though the helper processes it tried to spawn failed and terminated.
Setup Analysis:
Runner Script (run-electron-macos.sh calling macos-compat-runner.js): You have a script that spawns Electron. This adds a layer of complexity. The runner script (macos-compat-runner.js) forces many command-line flags (--no-sandbox, --disable-gpu*) and environment variables (DISABLE_GPU, ELECTRON_STANDALONE).
macOS Configuration (macos-app-config.js): This module applies more configuration before app.ready (like app.disableHardwareAcceleration(), appendSwitch('disable-gpu'), etc.).
Window Creation Logic (main.js): This code checks process.env.DISABLE_GPU (set by the runner) to apply different window settings.
Potential Conflicts & Causes:
Over-Configuration / Conflicting Flags: This is the most likely cause. You are setting GPU-related flags and disabling hardware acceleration in multiple places:
Runner script passes --disable-gpu, --disable-gpu-compositing, etc.
Runner script sets env.DISABLE_GPU = "true".
configureForMacOS (called before app.ready) calls app.disableHardwareAcceleration() and app.commandLine.appendSwitch('disable-gpu').
This redundancy and potential conflict between API calls (disableHardwareAcceleration) and command-line switches might confuse Electron's initialization sequence, leading to the Mach port failure.
--no-sandbox: While sometimes used as a workaround, disabling the sandbox fundamentally changes how processes interact and can sometimes cause other problems, potentially including IPC issues. It also has security implications.
Runner Script Complexity: Spawning Electron via another Node script can sometimes interfere with environment variable inheritance or process lifecycle management, although less likely to cause this specific error than flag conflicts.
ELECTRON_STANDALONE: "true": The runner forces standalone mode. Does main.js correctly handle this by always trying to load from file:// and finding the index.html? If it tries to connect to http://localhost:5000 (because isDev might still be true) while ELECTRON_STANDALONE is also true, the logic could be confused, although this usually leads to loading errors, not Mach port errors.
Recommendations:
Simplify the Launch:
Stop using the runner script (run-electron-macos.sh / macos-compat-runner.js) for now. Try launching Electron directly from your terminal within the project directory:
# Navigate to the directory containing main.js and package.json
# Make sure node_modules/.bin is in your PATH or use relative path
node_modules/.bin/electron main.js
Use code with caution.
Bash
This removes the extra layer and the flags/env vars forced by the runner. See if the app launches (it might have GPU issues, but we want to know if the Mach port error disappears).
Consolidate GPU Disabling:
Decide on one primary method. Using the API call before app.ready is generally cleaner:
Keep: app.disableHardwareAcceleration(); inside configureForMacOS.
Remove: All --disable-gpu* flags from any runner script or command-line launch.
Remove: app.commandLine.appendSwitch('disable-gpu'); and app.commandLine.appendSwitch('disable-gpu-compositing'); from configureForMacOS as they are redundant with app.disableHardwareAcceleration().
The DISABLE_GPU environment variable check in createWindow can remain if you need different window styles based on this, but it shouldn't be needed for the core disabling if app.disableHardwareAcceleration() is used.
Remove --no-sandbox: Only add this back if you encounter specific sandbox-related errors after fixing the Mach port issue and other flags.
Refine configureForMacOS:
// macos-app-config.js
function configureForMacOS(app) {
  if (!app.isReady()) {
    console.log('Applying macOS-specific app configuration...');
    // *** Primary way to disable GPU ***
    app.disableHardwareAcceleration();
    console.log('Hardware acceleration disabled via API.');

    // Other potentially useful flags (keep if needed, remove if unsure)
    // app.commandLine.appendSwitch('disable-remote-module'); // Often good practice
    // app.setAppUserModelId('com.electron.scientific-calculator');
    // app.commandLine.appendSwitch('js-flags', '--max-old-space-size=4096'); // Memory limit
    // app.commandLine.appendSwitch('disable-features', 'OutOfBlinkCors'); // Keep if needed

    // Remove redundant or potentially conflicting flags
    // app.commandLine.appendSwitch('disable-gpu-compositing'); // Covered by disableHardwareAcceleration
    // app.commandLine.appendSwitch('disable-gpu'); // Covered by disableHardwareAcceleration

    // Maybe keep this one if using Electron 28+ and experiencing UI layer issues
    // if (parseInt(process.versions.electron) >= 28) {
    //   app.commandLine.appendSwitch('enable-macos-layers-ui-compositing');
    // }

  } else {
    console.warn('Warning: macOS configuration applied after app ready - some settings may not take effect');
  }
}

// ... (getMacOSWindowSettings remains the same for now) ...

module.exports = {
  configureForMacOS,
  getMacOSWindowSettings
};
Use code with caution.
JavaScript
Adjust main.js for Simplified Launch: When launching directly (electron main.js), process.env.DISABLE_GPU won't be set by a runner. Decide if you still need that logic. You might want to always use the "simplified" non-transparent settings from getMacOSWindowSettings if hardware acceleration is off.
// Inside createWindow in main.js

// Prepare window settings based on platform
const windowSettings = { /* ... base settings ... */ };

if (process.platform === 'darwin') {
  // Apply macOS settings
  // Since we are calling app.disableHardwareAcceleration() reliably now,
  // maybe we *always* use the simplified settings on macOS?
  Object.assign(windowSettings, {
      transparent: false,
      backgroundColor: '#2e2c29', // Dark background color
      titleBarStyle: 'default',   // Standard title bar
      vibrancy: undefined,        // Disable vibrancy effects
      roundedCorners: false,      // Disable rounded corners perhaps? Or keep true? Test.
      // Keep other base settings like webPreferences, preload, etc.
  });
  console.log('Using simplified macOS window settings due to disabled HW acceleration.');

  // Or, if you want to keep the original logic based on an env var:
  // const macOSSettings = getMacOSWindowSettings();
  // if (process.env.DISABLE_GPU === 'true') { // How will this be set without runner?
  //   Object.assign(windowSettings, { /* simplified settings */});
  // } else {
  //   Object.assign(windowSettings, macOSSettings);
  // }
}

mainWindow = new BrowserWindow(windowSettings);
Use code with caution.
JavaScript
In summary: Ditch the runner, simplify and consolidate the GPU disabling flags/API calls in configureForMacOS, remove --no-sandbox, and test launching directly with electron main.js. This should eliminate the conflicting configurations causing the Mach port errors.