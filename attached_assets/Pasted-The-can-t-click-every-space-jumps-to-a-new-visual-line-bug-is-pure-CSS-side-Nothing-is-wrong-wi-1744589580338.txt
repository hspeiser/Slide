The “can’t‑click / every space jumps to a new visual line” bug is pure CSS‑side.
Nothing is wrong with CodeMirror or with your React code ― you’ve just overridden some internal assumptions the editor makes about how a line is laid out.

What CodeMirror expects
Every .cm-line is a plain block element with a single, continuous text flow.

The editor measures each line’s height and y‑position from the DOM every time you click or move the cursor.
If you give a line margins, turn it into a flex container, or otherwise let its children re‑flow independently, those measurements become wrong and hit‑testing fails ― clicks are ignored or land on the wrong logical line.
Marijn (the library author) explicitly warns:

“Margins on line elements are not supported. The editor needs to be able to assign a precise height to every line.” 
discuss.codemirror

What in your sheet breaks that contract
css
Copy
Edit
".cm-line": {
  display: "flex",          /* ← turns each line into a flex‑row */
  alignItems: "center",
  whiteSpace: "pre-wrap",   /* forces the browser, not CodeMirror, to wrap */
  ...
}
With display:flex every space becomes a potential line‑wrap boundary inside the flex row.
When the browser decides to wrap, it shows what looks like a new line even though the editor still thinks there’s only one, so further typing happens on the “old” line and clicking no longer works.

white-space: pre-wrap amplifies the effect by letting ordinary spaces wrap.

The extra DOM you add with
highlightSpecialChars({ addSpecialChars: /\s/ }) inserts a <span> for every single space, making wrapping and mis‑measurement even more likely.

Two‑minute repair
1 · Put lines back to normal blocks
diff
Copy
Edit
const editorTheme = EditorView.theme({
  ".cm-line": {
     textShadow: "0 0 0.5px hsla(var(--editor-text) / 0.1)",
     minHeight: "1.6rem",
-    display: "flex",
-    alignItems: "center",
-    whiteSpace: "pre-wrap",
+    /* leave the default display:block and white-space:pre
+       (CodeMirror’s own line‑wrapping extension handles wrapping safely) */
     cursor: "text",
     position: "relative",
     zIndex: "5"
  },
});
If you just wanted the text to sit a bit lower, use line-height or padding instead of flexbox.

2 · Stop decorating every space
diff
Copy
Edit
-const showSpaces = highlightSpecialChars({
-  render: ...,
-  addSpecialChars: /\s/
-});
+// default = only NBSP and TAB, which is safe
+const showSpaces = highlightSpecialChars();
(If you really need visible normal spaces, restrict the regexp to \u00A0 non‑breaking spaces or use an inline background image instead of extra DOM nodes.)

Optional clean‑up
Remove any vertical margins you may have put on .cm-line or on widgets that sit between lines; use padding on the line or a block widget decoration instead.

You can keep all the colour, cursor, and active‑line styling ― they don’t interfere with hit‑testing as long as you avoid flex and margins.

After the patch
Clicks land exactly where you expect, even when there are errors.

Pressing Space no longer forces a spurious visual line‑break.

Cursor, selection and undo/redo all behave normally.

Give that a try, hot‑reload, and the editor should feel solid again.